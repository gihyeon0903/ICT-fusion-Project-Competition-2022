import cv2, keyboard
import mediapipe as mp
import numpy as np
from tqdm import tqdm

mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_hands = mp.solutions.hands

cap = cv2.VideoCapture(0)

recieve_toggle = False
data_count = 0
pbar = tqdm(total=500)



# landmarkdata save
f = open("textfiles/eight.txt", 'a')

with mp_hands.Hands(
    model_complexity=0,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5) as hands:
    
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            print("Ignoring empty camera frame.")
            continue

        # To improve performance, optionally mark the image as not writeable to
        # pass by reference.
        image.flags.writeable = False
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = hands.process(image)

        # Draw the hand annotations on the image.
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        
        
        if results.multi_hand_landmarks:

            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(
                    image,
                    hand_landmarks,
                    mp_hands.HAND_CONNECTIONS,
                    mp_drawing_styles.get_default_hand_landmarks_style(),
                    mp_drawing_styles.get_default_hand_connections_style())

            if recieve_toggle:
                for point in results.multi_hand_landmarks[0].landmark:
                    f.write(str(round(point.x, 2)) + " " + str(round(point.y, 2)) + " " + str(round(point.z,2)) + " ")
                f.write("\n")
                
                data_count = data_count + 1
                pbar.update(1)
                
        if keyboard.is_pressed("s"):
            recieve_toggle = not recieve_toggle
            print("save start")
            
        # Flip the image horizontally for a selfie-view display.    
        cv2.imshow('MediaPipe Hands', cv2.flip(image, 1))
        if cv2.waitKey(1) & 0xFF == 27 or data_count == 500:
            print("close")
            f.close()
            pbar.close()
            cv2.destroyAllWindows()
            break
        
cap.release()